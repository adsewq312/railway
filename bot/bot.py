import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.filters import CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery, FSInputFile
from website.models import db, User, Game, Team, TeamMember, Question, Answer, Round, TelegramCode, Quiz
from website.views.auth import generate_code
from website.views.quiz_parser import parse_quiz_content
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import text
import contextlib
import asyncio
from functools import wraps
from sqlalchemy.orm import scoped_session, sessionmaker
from datetime import datetime
from aiogram.types import Message, CallbackQuery
import tempfile
from docx import Document

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä—ã
GAME_STATUS_SETUP = 'setup'
GAME_STATUS_READY = 'ready'
GAME_STATUS_ACTIVE = 'active'
GAME_STATUS_PAUSED = 'paused'
GAME_STATUS_FINISHED = 'finished'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback data
START_GAME = 'start_game'
NEXT_QUESTION = 'next_question'
ASK_QUESTION = 'ask_question'
PAUSE_GAME = 'pause_game'
RESUME_GAME = 'resume_game'
END_GAME = 'end_game'
APPROVE_ANSWER = 'approve_answer'
REJECT_ANSWER = 'reject_answer'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = None
dp = None
flask_app = None

def with_app_context(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {func.__name__}: {e}")
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
            if len(args) > 0 and isinstance(args[0], types.Message):
                await args[0].answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            elif len(args) > 0 and isinstance(args[0], types.CallbackQuery):
                await args[0].answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    return wrapper

def create_bot(app):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        global flask_app
        flask_app = app

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        global bot, dp
        bot = Bot(token=bot_token)
        dp = Dispatcher()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(dp)
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return bot, dp

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_login, Command("login"))
    dp.message.register(cmd_join, Command("join"))
    dp.message.register(cmd_upload_quiz, Command("upload_quiz"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    dp.message.register(process_quiz_file, lambda msg: msg.document is not None)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(process_join_game, lambda c: c.data == "join_game")
    dp.callback_query.register(process_auto_join, lambda c: c.data.startswith("auto_join:"))
    dp.message.register(process_game_code, lambda m: hasattr(m, 'text') and len(m.text) == 6 and m.text.isupper())
    dp.callback_query.register(process_join_team, lambda c: c.data.startswith("join_team:"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    dp.callback_query.register(process_ready_game, lambda c: c.data.startswith("ready_game:"))
    dp.callback_query.register(process_start_game, lambda c: c.data.startswith(f"{START_GAME}:"))
    dp.callback_query.register(process_next_question, lambda c: c.data.startswith(f"{NEXT_QUESTION}:"))
    dp.callback_query.register(process_ask_question, lambda c: c.data.startswith(f"{ASK_QUESTION}:"))
    dp.callback_query.register(process_pause_game, lambda c: c.data.startswith(f"{PAUSE_GAME}:"))
    dp.callback_query.register(process_resume_game, lambda c: c.data.startswith(f"{RESUME_GAME}:"))
    dp.callback_query.register(process_finish_game, lambda c: c.data.startswith(f"{END_GAME}:"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    dp.callback_query.register(process_answer_choice, lambda c: c.data.startswith("answer:"))
    dp.callback_query.register(process_answer_review, lambda c: c.data and (
        c.data.startswith(f"{APPROVE_ANSWER}:") or 
        c.data.startswith(f"{REJECT_ANSWER}:")
    ))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    dp.message.register(process_answer, lambda msg: msg.text and not msg.text.startswith('/'))

@with_app_context
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_id = os.getenv('ADMIN_USER_ID')
    logger.info(f"ADMIN_USER_ID –∏–∑ .env: {admin_id}")
    logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, —Ç–∏–ø: {type(message.from_user.id)}")
    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {str(message.from_user.id)} == {admin_id}")
    
    is_admin = admin_id and str(message.from_user.id) == admin_id
    logger.info(f"is_admin: {is_admin}")
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.session.begin_nested()
        
        user = User.query.filter_by(telegram_id=message.from_user.id).first()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª—å—é
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username or str(message.from_user.id),
                role="admin" if is_admin else "player"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å admin –¥–ª—è –∞–¥–º–∏–Ω–∞
            )
            db.session.add(user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} —Å —Ä–æ–ª—å—é {user.role}")
        elif is_admin and user.role != 'admin':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –Ω–æ —Ä–æ–ª—å –Ω–µ admin
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} —Å {user.role} –Ω–∞ admin")
            user.role = 'admin'
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ä–æ–ª—å—é {user.role}")
            if is_admin:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –Ω–æ —Ä–æ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º
        if user.role in ['admin', 'moderator']:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏",
                            callback_data="manage_games"
                        )
                    ]
                ]
            )
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ",
                            callback_data="join_game"
                        )
                    ]
                ]
            )
        
        role_text = {
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "moderator": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "player": "–ò–≥—Ä–æ–∫"
        }.get(user.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! –í–∞—à–∞ —Ä–æ–ª—å: {role_text}\n"
            f"–í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID: {user.id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cmd_start: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@with_app_context
async def cmd_login(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /login"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /login –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ ADMIN_USER_ID
        admin_id = os.getenv('ADMIN_USER_ID')
        if not admin_id or str(message.from_user.id) != admin_id:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.session.begin_nested()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.filter_by(telegram_id=message.from_user.id).first()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username or f"admin_{message.from_user.id}",
                role="admin"
            )
            db.session.add(user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.username}")
        elif user.role != 'admin':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –¥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            user.role = 'admin'
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –¥–æ admin")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = generate_code()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ {code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã
        existing_codes = TelegramCode.query.filter_by(telegram_id=message.from_user.id, is_used=False).all()
        if existing_codes:
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã: {[code.code for code in existing_codes]}")
            # –û—Ç–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            for old_code in existing_codes:
                old_code.is_used = True
            logger.info("–°—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –±–∞–∑—É
        telegram_code = TelegramCode(
            code=code,
            telegram_id=message.from_user.id
        )
        db.session.add(telegram_code)
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        logger.info(f"–ö–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {code}\n\n"
            "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."
        )
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cmd_login: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@with_app_context
async def process_join_game(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ (6 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–≥—Ä—ã."
    )
    await callback_query.answer()

@with_app_context
async def process_auto_join(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ"""
    join_code = callback_query.data.split(':')[1]
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    message = types.Message(
        message_id=0,
        date=datetime.now(),
        chat=callback_query.message.chat,
        from_user=callback_query.from_user,
        text=f"/join {join_code}",
        bot=callback_query.bot,
        conf={'skip_validation': True}
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
    command = CommandObject(
        prefix="/",
        command="join",
        args=join_code
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã join
    await cmd_join(message, command)
    
    await callback_query.answer()

@with_app_context
async def process_game_code(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–≤–∏–∑–∞"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∫–≤–∏–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    user = User.query.filter_by(telegram_id=message.from_user.id).first()
    if not user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ò—â–µ–º –∏–≥—Ä—É –ø–æ –∫–æ–¥—É
    game = Game.query.filter_by(join_code=message.text).first()
    
    if not game:
        await message.answer("–ö–≤–∏–∑ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    if game.status != Game.STATUS_READY:
        await message.answer(
            "–≠—Ç–æ—Ç –∫–≤–∏–∑ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∏–≥—Ä–æ–∫–æ–≤.\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –∫–≤–∏–∑."
        )
        return
    
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
    team_member = TeamMember.query.filter_by(user_id=user.id)\
        .join(TeamMember.team)\
        .join(Team.games)\
        .filter(Game.id == game.id)\
        .first()
    
    if not team_member:
        await message.answer(
            "–í—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∫–≤–∏–∑–∞."
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ
    if team_member.joined_at:
        await message.answer(
            f"–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–≤–∏–∑—É –≤ –∫–æ–º–∞–Ω–¥–µ {team_member.team.name}.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞!"
        )
        return
        
    # –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    team_member.joined_at = datetime.utcnow()
    db.session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    from website.socket import socketio
    socketio.emit('player_joined', {
        'user_id': user.id,
        'username': user.username,
        'team_id': team_member.team_id
    }, room=f'game_{game.id}')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–∞—Ö
    total_rounds = Round.query.filter_by(quiz_id=game.quiz_id).count()
    first_round = Round.query.filter_by(quiz_id=game.quiz_id, order=1).first()
    questions_in_first_round = Question.query.filter_by(round_id=first_round.id).count() if first_round else 0
    
    await message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–≤–∏–∑—É –≤ –∫–æ–º–∞–Ω–¥–µ {team_member.team.name}!\n\n"
        f"üìö –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {total_rounds}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ: {questions_in_first_round}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞."
    )

@with_app_context
async def cmd_join(message: types.Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        if not command.args:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = command.args.strip().split()
        join_code = args[0].upper()
        
        logger.info(f"–ö–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {join_code}")
        
        # –ò—â–µ–º –∏–≥—Ä—É –ø–æ –∫–æ–¥—É
        game = Game.query.filter_by(join_code=join_code).first()
        if not game:
            logger.warning(f"–ò–≥—Ä–∞ —Å –∫–æ–¥–æ–º {join_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await message.answer("–ò–≥—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ {game.id}, —Å—Ç–∞—Ç—É—Å: '{game.status}'")
        if game.status != Game.STATUS_READY:
            logger.warning(f"–ò–≥—Ä–∞ —Å –∫–æ–¥–æ–º {join_code} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {game.status}")
            await message.answer(
                "–≠—Ç–∞ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –∏–≥—Ä–æ–∫–æ–≤.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –∏–≥—Ä—É."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.filter_by(telegram_id=message.from_user.id).first()
        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º/–º–æ–¥–µ—Ä–æ–º
        is_game_admin = user.role in ['admin', 'moderator'] and game.moderator_id == user.id
        
        if is_game_admin:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∫–≤–∏–∑",
                            callback_data=f"{START_GAME}:{game.id}"
                        )
                    ]
                ]
            )
            await message.answer(
                "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–≤–∏–∑–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º:",
                reply_markup=keyboard
            )
            return

        # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
        team_member = TeamMember.query.filter_by(user_id=user.id)\
            .join(TeamMember.team)\
            .join(Team.games)\
            .filter(Game.id == game.id)\
            .first()
        
        if not team_member:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä—ã {game.id}")
            await message.answer(
                "–í—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É —ç—Ç–æ–π –∏–≥—Ä—ã.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏–≥—Ä—ã."
            )
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ
        if team_member.joined_at:
            await message.answer(
                f"–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ –∫–æ–º–∞–Ω–¥–µ {team_member.team.name}.\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!"
            )
            return
            
        # –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        team_member.joined_at = datetime.utcnow()
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        from website.socket import socketio
        socketio.emit('player_joined', {
            'user_id': user.id,
            'username': user.username,
            'team_id': team_member.team_id
        }, room=f'game_{game.id}')
        
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ {team_member.team.name}!\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /join: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@with_app_context
async def process_join_team(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ"""
    team_id = int(callback_query.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    user = User.query.filter_by(telegram_id=callback_query.from_user.id).first()
    if not user:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    team = Team.query.get(team_id)
    if not team:
        await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
    existing_member = TeamMember.query.filter_by(
        team_id=team.id,
        user_id=user.id
    ).first()
    
    if existing_member:
        await callback_query.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
    team_member = TeamMember(team_id=team.id, user_id=user.id)
    db.session.add(team_member)
    db.session.commit()
    
    await callback_query.message.edit_text(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ {team.name}!"
    )
    await callback_query.answer()

@with_app_context
async def process_ready_game(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–≤–∏–∑–∞ –∫ –Ω–∞—á–∞–ª—É"""
    game_id = int(callback_query.data.split(':')[1])
    
    game = Game.query.get(game_id)
    if not game:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if game.moderator_id != User.query.filter_by(telegram_id=callback_query.from_user.id).first().id:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∫–≤–∏–∑–æ–º", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –∏–≥—Ä–æ–∫–∏
    if not game.teams:
        await callback_query.answer("–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ –±–µ–∑ –∫–æ–º–∞–Ω–¥", show_alert=True)
        return
    
    for team in game.teams:
        if not team.members:
            await callback_query.answer(f"–í –∫–æ–º–∞–Ω–¥–µ {team.name} –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤", show_alert=True)
            return
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ READY
    game.status = Game.STATUS_READY
    db.session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∫–≤–∏–∑",
                    callback_data=f"{START_GAME}:{game_id}"
                )
            ]
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–∞—Ö
    teams_info = "\n\n".join([
        f"–ö–æ–º–∞–Ω–¥–∞: {team.name}\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {team.captain.username}\n"
        f"–ò–≥—Ä–æ–∫–∏: {', '.join(member.user.username for member in team.members)}"
        for team in game.teams
    ])
    
    await callback_query.message.edit_text(
        f"–ö–≤–∏–∑ –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {game.quiz.title}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n{teams_info}",
        reply_markup=keyboard
    )
    
    await callback_query.answer()

@with_app_context
async def process_start_game(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
    game_id = int(callback_query.data.split(':')[1])
    user = User.query.filter_by(telegram_id=callback_query.from_user.id).first()
    
    if not user or user.role not in ['admin', 'moderator']:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º", show_alert=True)
        return
        
    game = Game.query.get(game_id)
    if not game or game.moderator_id != user.id:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True)
        return
        
    if game.status != Game.STATUS_READY:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É", show_alert=True)
        return
        
    try:
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        game.status = Game.STATUS_ACTIVE
        game.started_at = datetime.utcnow()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        first_round = Round.query.filter_by(quiz_id=game.quiz_id, order=1).first()
        if first_round:
            first_question = Question.query.filter_by(round_id=first_round.id, order=1).first()
            if first_question:
                game.current_question_id = first_question.id
            
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        from website.socket import socketio, broadcast_game_state
        broadcast_game_state(game.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–∞—Ö
        total_rounds = Round.query.filter_by(quiz_id=game.quiz_id).count()
        questions_in_first_round = Question.query.filter_by(round_id=first_round.id).count()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for team in game.teams:
            for member in team.members:
                if member.joined_at:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
                    await bot.send_message(
                        member.user.telegram_id,
                        f"üéÆ –ö–≤–∏–∑ ¬´{game.quiz.title}¬ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
                        f"üéØ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ –∫–æ–º–∞–Ω–¥—É ¬´{team.name}¬ª\n"
                        f"üìö –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {total_rounds}\n"
                        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ: {questions_in_first_round}\n\n"
                        f"üë• –í–∞—à–∏ —Ç–æ–≤–∞—Ä–∏—â–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:\n"
                        + "\n".join(f"‚Ä¢ {m.user.username}" for m in team.members if m.id != member.id)
                        + "\n\n"
                        f"–ñ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞..."
                    )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await update_moderator_panel(game, callback_query.message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∫–≤–∏–∑–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∫–≤–∏–∑–∞", show_alert=True)

@with_app_context
async def process_next_round(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É"""
    game_id = int(callback_query.data.split(':')[1])
    
    game = Game.query.get(game_id)
    if not game or game.status != Game.STATUS_ACTIVE:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
    current_round = None
    if game.current_question_id:
        current_question = Question.query.get(game.current_question_id)
        current_round = current_question.round
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    next_round = None
    if current_round:
        next_round = Round.query.filter_by(
            quiz_id=game.quiz_id,
            order=current_round.order + 1
        ).first()
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        next_round = Round.query.filter_by(
            quiz_id=game.quiz_id,
            order=1
        ).first()
    
    if not next_round:
        await callback_query.answer("–ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞", show_alert=True)
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    next_question = Question.query.filter_by(
        round_id=next_round.id,
        order=1
    ).first()
    
    if not next_question:
        await callback_query.answer("–í —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    game.current_question_id = next_question.id
    db.session.commit()
    
    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    for team in game.teams:
        for member in team.members:
            try:
                await bot.send_message(
                    member.user.telegram_id,
                    f"–ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥: {next_round.title}\n"
                    f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –æ—Ç–≤–µ—Ç–∞–º!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {member.user.username}: {e}")
    
    await callback_query.answer("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥")

@with_app_context
async def process_pause_game(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã –Ω–∞ –ø–∞—É–∑—É"""
    game_id = int(callback_query.data.split(':')[1])
    
    game = Game.query.get(game_id)
    if not game or game.status != Game.STATUS_ACTIVE:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    game.status = Game.STATUS_PAUSED
    db.session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                    callback_data=f"resume_game:{game_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"finish_game:{game_id}"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        f"–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
        f"–ö–≤–∏–∑: {game.quiz.title}",
        reply_markup=keyboard
    )
    
    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ –ø–∞—É–∑–µ
    for team in game.teams:
        for member in team.members:
            try:
                await bot.send_message(
                    member.user.telegram_id,
                    "–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {member.user.username}: {e}")
    
    await callback_query.answer()

@with_app_context
async def process_resume_game(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã"""
    game_id = int(callback_query.data.split(':')[1])
    
    game = Game.query.get(game_id)
    if not game or game.status != Game.STATUS_PAUSED:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ", show_alert=True)
        return
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    game.status = Game.STATUS_ACTIVE
    db.session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥",
                    callback_data=f"next_round:{game_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚è∏Ô∏è –ü–∞—É–∑–∞",
                    callback_data=f"pause_game:{game_id}"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        f"–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\n"
        f"–ö–≤–∏–∑: {game.quiz.title}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.",
        reply_markup=keyboard
    )
    
    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    for team in game.teams:
        for member in team.members:
            try:
                await bot.send_message(
                    member.user.telegram_id,
                    "–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {member.user.username}: {e}")
    
    await callback_query.answer()

@with_app_context
async def process_finish_game(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    game_id = int(callback_query.data.split(':')[1])
    
    game = Game.query.get(game_id)
    if not game or game.status not in [Game.STATUS_ACTIVE, Game.STATUS_PAUSED]:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
        return
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    game.status = Game.STATUS_FINISHED
    db.session.commit()
    
    await callback_query.message.edit_text(
        f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"–ö–≤–∏–∑: {game.quiz.title}"
    )
    
    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    for team in game.teams:
        for member in team.members:
            try:
                await bot.send_message(
                    member.user.telegram_id,
                    "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {member.user.username}: {e}")
    
    await callback_query.answer()

async def echo(message: types.Message):
    """–≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ",
                        callback_data="join_game"
                    )
                ]
            ]
        )
        
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/login - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_bot(bot: Bot, dp: Dispatcher):
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

def format_scoreboard(game: Game) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    scores = []
    for team in game.teams:
        total_score = sum(answer.score or 0 for answer in team.answers)
        scores.append((team.name, total_score))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
    scores.sort(key=lambda x: x[1], reverse=True)
    
    result = "üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç:\n\n"
    for i, (team_name, score) in enumerate(scores, 1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚ñ´Ô∏è"
        result += f"{medal} {team_name}: {score} –æ—á–∫–æ–≤\n"
    
    return result

def get_quiz_progress(game: Game) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–≤–∏–∑–∞"""
    if not game.current_question:
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
        
    current_round = game.current_question.round
    current_question = game.current_question
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–∞—Ö
    total_rounds = Round.query.filter_by(quiz_id=game.quiz_id).count()
    questions_in_current_round = Question.query.filter_by(round_id=current_round.id).count()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
    next_question_same_round = Question.query.filter(
        Question.round_id == current_round.id,
        Question.order > current_question.order
    ).order_by(Question.order).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    next_round = Round.query.filter(
        Round.quiz_id == game.quiz_id,
        Round.order > current_round.order
    ).order_by(Round.order).first()
    
    next_question_next_round = Question.query.filter(
        Question.round_id == next_round.id
    ).order_by(Question.order).first() if next_round else None
    
    progress = (
        f"üìç –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n"
        f"–†–∞—É–Ω–¥ {current_round.order} –∏–∑ {total_rounds}: {current_round.title}\n"
        f"–í–æ–ø—Ä–æ—Å {current_question.order} –∏–∑ {questions_in_current_round}\n\n"
    )
    
    if next_question_same_round:
        progress += (
            f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n"
            f"–û—Å—Ç–∞–Ω–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ\n"
            f"–í–æ–ø—Ä–æ—Å {next_question_same_round.order} –∏–∑ {questions_in_current_round}\n"
            f"–¢–∏–ø: {'–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤' if next_question_same_round.type == 'multiple_choice' else '–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç'}\n\n"
        )
    elif next_round and next_question_next_round:
        questions_in_next_round = Question.query.filter_by(round_id=next_round.id).count()
        progress += (
            f"üìö –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥:\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—É–Ω–¥—É {next_round.order} –∏–∑ {total_rounds}: {next_round.title}\n"
            f"–ù–∞—á–Ω–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞ 1 –∏–∑ {questions_in_next_round}\n"
            f"–¢–∏–ø: {'–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤' if next_question_next_round.type == 'multiple_choice' else '–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç'}\n\n"
        )
    else:
        progress += "üèÅ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞!\n\n"
    
    return progress

async def update_moderator_panel(game: Game, message: Message = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    progress = get_quiz_progress(game)
    scoreboard = format_scoreboard(game)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–æ–º ¬´{game.quiz.title}¬ª\n\n"
        f"{progress}\n"
        f"{scoreboard}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                    callback_data=f"{ASK_QUESTION}:{game.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
                    callback_data=f"{NEXT_QUESTION}:{game.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚è∏Ô∏è –ü–∞—É–∑–∞",
                    callback_data=f"{PAUSE_GAME}:{game.id}"
                ),
                InlineKeyboardButton(
                    text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"{END_GAME}:{game.id}"
                )
            ]
        ]
    )
    
    if message:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await bot.send_message(game.moderator.telegram_id, text, reply_markup=keyboard)

async def send_question(game: Game):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    if not game.current_question:
        return
        
    question = game.current_question
    round_info = f"–†–∞—É–Ω–¥ {question.round.order}" if question.round else ""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text = (
        f"‚ùì {round_info}\n"
        f"–í–æ–ø—Ä–æ—Å {question.order}:\n\n"
        f"{question.text}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
    scoreboard = format_scoreboard(game)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if question.type == 'multiple_choice' and question.options:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=option,
                        callback_data=f"answer:{game.id}:{question.id}:{i}"
                    )
                ] for i, option in enumerate(question.options)
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        for team in game.teams:
            for member in team.members:
                if member.joined_at:
                    await bot.send_message(
                        member.user.telegram_id,
                        f"{question_text}\n\n{scoreboard}",
                        reply_markup=keyboard
                    )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        for team in game.teams:
            for member in team.members:
                if member.joined_at:
                    await bot.send_message(
                        member.user.telegram_id,
                        f"{question_text}\n\n"
                        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.\n\n"
                        f"{scoreboard}"
                    )

@with_app_context
async def process_ask_question(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
    game_id = int(callback_query.data.split(':')[1])
    
    user = User.query.filter_by(telegram_id=callback_query.from_user.id).first()
    if not user or user.role not in ['admin', 'moderator']:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º", show_alert=True)
        return
        
    game = Game.query.get(game_id)
    if not game or game.moderator_id != user.id:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True)
        return
        
    if game.status != Game.STATUS_ACTIVE:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        await send_question(game)
        await callback_query.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await update_moderator_panel(game, callback_query.message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)

@with_app_context
async def process_next_question(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
    game_id = int(callback_query.data.split(':')[1])
    
    user = User.query.filter_by(telegram_id=callback_query.from_user.id).first()
    if not user or user.role not in ['admin', 'moderator']:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º", show_alert=True)
        return
        
    game = Game.query.get(game_id)
    if not game or game.moderator_id != user.id:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True)
        return
        
    if game.status != Game.STATUS_ACTIVE:
        await callback_query.answer("–ö–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return
        
    try:
        current_question = game.current_question
        if not current_question:
            await callback_query.answer("–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        current_round = current_question.round
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
        next_question = Question.query.filter(
            Question.round_id == current_round.id,
            Question.order > current_question.order
        ).order_by(Question.order).first()
        
        if not next_question:
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            next_round = Round.query.filter(
                Round.quiz_id == game.quiz_id,
                Round.order > current_round.order
            ).order_by(Round.order).first()
            
            if next_round:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
                next_question = Question.query.filter_by(
                    round_id=next_round.id
                ).order_by(Question.order).first()
        
        if not next_question:
            # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
            game.status = Game.STATUS_FINISHED
            game.finished_at = datetime.utcnow()
            db.session.commit()
            
            final_scoreboard = format_scoreboard(game)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
            for team in game.teams:
                for member in team.members:
                    if member.joined_at:
                        await bot.send_message(
                            member.user.telegram_id,
                            f"üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                            f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç:\n{final_scoreboard}\n"
                            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéâ"
                        )
            
            await callback_query.message.edit_text(
                f"üèÅ –ö–≤–∏–∑ ¬´{game.quiz.title}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç:\n{final_scoreboard}",
                reply_markup=None
            )
            return
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        game.current_question_id = next_question.id
        db.session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É/—Ä–∞—É–Ω–¥—É
        if next_question.round_id != current_round.id:
            for team in game.teams:
                for member in team.members:
                    if member.joined_at:
                        await bot.send_message(
                            member.user.telegram_id,
                            f"üìö –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥!\n"
                            f"–†–∞—É–Ω–¥ {next_question.round.order}: {next_question.round.title}"
                        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await update_moderator_panel(game, callback_query.message)
        
        await callback_query.answer(
            "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤—ã–ø–æ–ª–Ω–µ–Ω. "
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@with_app_context
async def process_answer_choice(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    _, game_id, question_id, option_idx = callback_query.data.split(':')
    game_id, question_id, option_idx = map(int, [game_id, question_id, option_idx])
    
    user = User.query.filter_by(telegram_id=callback_query.from_user.id).first()
    if not user:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    team_member = TeamMember.query.filter_by(user_id=user.id)\
        .join(TeamMember.team)\
        .join(Team.games)\
        .filter(Game.id == game_id)\
        .first()
        
    if not team_member or not team_member.joined_at:
        await callback_query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∏–≥—Ä—ã", show_alert=True)
        return
        
    game = Game.query.get(game_id)
    if not game or game.status != Game.STATUS_ACTIVE:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
        return
        
    question = Question.query.get(question_id)
    if not question or question.id != game.current_question_id:
        await callback_query.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return
        
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    answer = Answer(
        game_id=game_id,
        team_id=team_member.team_id,
        question_id=question_id,
        user_id=user.id,
        answer_text=question.options[option_idx]
    )
    db.session.add(answer)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    if question.correct_option is not None:
        answer.score = 1.0 if option_idx == question.correct_option else 0.0
        
    db.session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        game.moderator.telegram_id,
        f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã {team_member.team.name}:\n"
        f"–ò–≥—Ä–æ–∫: {user.username}\n"
        f"–û—Ç–≤–µ—Ç: {question.options[option_idx]}\n"
        f"{'‚úÖ –í–µ—Ä–Ω–æ' if answer.score == 1.0 else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ' if answer.score == 0.0 else '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'}"
    )
    
    await callback_query.answer("–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")

@with_app_context
async def process_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    user = User.query.filter_by(telegram_id=message.from_user.id).first()
    if not user:
        return
        
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    team_member = TeamMember.query.filter_by(user_id=user.id)\
        .join(TeamMember.team)\
        .join(Team.games)\
        .filter(Game.status == Game.STATUS_ACTIVE)\
        .first()
        
    if not team_member or not team_member.joined_at:
        return
        
    game = team_member.team.games[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    
    if not game.current_question:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return
        
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    answer = Answer(
        game_id=game.id,
        team_id=team_member.team_id,
        question_id=game.current_question_id,
        user_id=user.id,
        answer_text=message.text
    )
    db.session.add(answer)
    db.session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data=f"{APPROVE_ANSWER}:{answer.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"{REJECT_ANSWER}:{answer.id}"
                )
            ]
        ]
    )
    
    await bot.send_message(
        game.moderator.telegram_id,
        f"–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã {team_member.team.name}:\n"
        f"–ò–≥—Ä–æ–∫: {user.username}\n"
        f"–û—Ç–≤–µ—Ç: {message.text}",
        reply_markup=keyboard
    )
    
    await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")

@with_app_context
async def process_answer_review(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    action, answer_id = callback_query.data.split(':')
    answer_id = int(answer_id)
    
    user = User.query.filter_by(telegram_id=callback_query.from_user.id).first()
    if not user or user.role not in ['admin', 'moderator']:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤", show_alert=True)
        return
        
    answer = Answer.query.get(answer_id)
    if not answer:
        await callback_query.answer("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    game = Game.query.get(answer.game_id)
    if not game or game.moderator_id != user.id:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
        return
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
    answer.score = 1.0 if action == APPROVE_ANSWER else 0.0
    db.session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
    scoreboard = format_scoreboard(game)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    await callback_query.message.edit_text(
        callback_query.message.text + f"\n\n{'‚úÖ –ü—Ä–∏–Ω—è—Ç' if action == APPROVE_ANSWER else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'}",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ
    team = Team.query.get(answer.team_id)
    for member in team.members:
        if member.joined_at:
            await bot.send_message(
                member.user.telegram_id,
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {answer.question.order}:\n"
                f"{'‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!' if action == APPROVE_ANSWER else '‚ùå –û—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω'}\n\n"
                f"{scoreboard}"
            )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ
    from website.socket import broadcast_scoreboard
    broadcast_scoreboard(game.id)
    
    await callback_query.answer("–û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω") 

@with_app_context
async def cmd_upload_quiz(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload_quiz"""
    user = User.query.filter_by(telegram_id=message.from_user.id).first()
    if not user or user.role not in ['admin', 'moderator']:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∏–∑–æ–≤.")
        return

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–≤–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –∏–ª–∏ .docx.\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:\n"
        "# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞\n\n"
        "## –†–∞—É–Ω–¥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "1. –í–æ–ø—Ä–æ—Å\n"
        "–¢–∏–ø: multiple_choice/open_answer\n"
        "–û—Ç–≤–µ—Ç: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã: –≤–∞—Ä–∏–∞–Ω—Ç1;–≤–∞—Ä–∏–∞–Ω—Ç2;–≤–∞—Ä–∏–∞–Ω—Ç3 (–¥–ª—è multiple_choice)\n"
        "–ë–∞–ª–ª—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤\n"
        "–í—Ä–µ–º—è: –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )

@with_app_context
async def process_quiz_file(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫–≤–∏–∑–∞"""
    if not message.document:
        return

    user = User.query.filter_by(telegram_id=message.from_user.id).first()
    if not user or user.role not in ['admin', 'moderator']:
        return

    file_name = message.document.file_name.lower()
    if not (file_name.endswith('.txt') or file_name.endswith('.docx')):
        await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt –∏ .docx")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–π—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
        file = await bot.get_file(message.document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if file_name.endswith('.txt'):
            content = file_bytes.decode('utf-8')
        else:  # .docx
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º bytes –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è docx
            with tempfile.NamedTemporaryFile(suffix='.docx', delete=True) as tmp_file:
                tmp_file.write(file_bytes)
                tmp_file.flush()  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã
                doc = Document(tmp_file.name)
                content = '\n'.join(paragraph.text for paragraph in doc.paragraphs)
        
        if not content:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
            
        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        quiz = parse_quiz_content(content, user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        rounds_count = len(quiz.rounds)
        questions_count = sum(len(round.questions) for round in quiz.rounds)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ
        round_stats = []
        for i, round_obj in enumerate(quiz.rounds):
            multiple_choice = sum(1 for q in round_obj.questions if q.type == 'multiple_choice')
            open_answer = sum(1 for q in round_obj.questions if q.type == 'open_answer')
            round_stats.append(
                f"–†–∞—É–Ω–¥ {i+1}: {len(round_obj.questions)} –≤–æ–ø—Ä. "
                f"({multiple_choice} —Ç–µ—Å—Ç–æ–≤—ã—Ö, {open_answer} –æ—Ç–∫—Ä—ã—Ç—ã—Ö)"
            )
        
        await message.answer(
            f"‚úÖ –ö–≤–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {quiz.title}\n"
            f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {rounds_count}\n"
            f"‚ùì –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}\n\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º:\n" + 
            "\n".join(round_stats)
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∏–∑–∞: {str(e)}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∏–∑–∞: {str(e)}\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8"
        ) 